#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import threading
import requests
import glob

from multiprocessing.dummy import Pool as ThreadPool

__version__ = '1.0.1'

class WordDictonary():

    def __init__(self, word_dict):
        self.words = word_dict.readlines()
        print('----------------------')
        print('Generated words {}'.format(len(self.words)))
        print('----------------------\n')
        self.current_index = 0

    def __iter__(self):
        self.current_index = 0
        return self

    def __next__(self) -> str:
        if self.current_index == len(self.words):
            raise StopIteration
        value = self.words[self.current_index]
        self.current_index += 1
        return value.rstrip()


class RequestHandler():
    MAX_NUMBER_REQUEST = 30 
    VALID_STATUS_CODE = [200, 201, 202, 203, 301, 302, 400, 401, 403, 405]
    DIRECTORY_FOUND_MESSAGE = 'Directory => {} (Status code: {})'
    URL_FOUND_MESSAGE = '+ {} (Status code: {})'

    def __init__(self, host: str, word_dictionary: list, nb_thread: int , status_code, proxy: dict, directory_to_ignore=[]):
        self.host = host
        if 'https' in self.host:
            import urllib3
            urllib3.disable_warnings()
        self.word_dictionary = word_dictionary
        self.status_code = status_code or RequestHandler.VALID_STATUS_CODE
        self.request_pool = ThreadPool(nb_thread or RequestHandler.MAX_NUMBER_REQUEST)
        self.proxy = proxy
        self.directory_to_ignore = directory_to_ignore

    def send_requests_with_all_words(self, url=None) -> None:
        url = url or self.host
        print('\n*** Scanning URL: {} ***\n'.format(url))
        url_completed = [ url + (word[1:] if word.startswith('/') else word) for word in self.word_dictionary if word != '/' and word != '' ]
        directory_found = self.request_pool.map(self._request_thread, url_completed)
        dir_with_no_none = self._remove_invalid_url_from_directory_found(directory_found, url)
        for directory in dir_with_no_none: 
            if self._is_directory_to_ignore(directory):
                self.send_requests_with_all_words(directory)

    def _is_directory_to_ignore(self, directory) -> bool:
        return False if any([ True for directory_to_ignore in self.directory_to_ignore if directory_to_ignore in directory ]) else True 

    def _remove_invalid_url_from_directory_found(self, directory_found, url) -> list:
        return [ dir_to_test for dir_to_test in directory_found if dir_to_test is not None and dir_to_test != url ]

    def _request_thread(self, complete_url) -> str or None:
        response = requests.get(complete_url, proxies=self.proxy, verify=False)
        directory_url = None
        if response.status_code in self.status_code:
            # We need to check for redirection if we are redirected we want the first url
            # Normaly get redirected it returns a 200 status_code but it not always the real status code 
            if response.history and response.history[0].status_code in self.status_code:
                print(self.URL_FOUND_MESSAGE.format(response.history[0].url, str(response.history[0].status_code)))
            elif response.url.endswith('/'):
                print(self.DIRECTORY_FOUND_MESSAGE.format(response.url, str(response.status_code)))
                directory_url = response.url
            else:
                print(self.URL_FOUND_MESSAGE.format(response.url, str(response.status_code)))
        elif response.status_code == 404:
            # We need to check for redirection if we are redirected we want the first url
            # Normaly when we find a directory like /css/ it returns a 404
            if response.history and response.history[0].status_code in self.status_code:
                print(self.DIRECTORY_FOUND_MESSAGE.format(response.url, str(response.history[0].status_code)))
                directory_url = response.url
        return directory_url 


def number_of_thread(value) -> int:
    value = int(value)
    if value > RequestHandler.MAX_NUMBER_REQUEST:
        raise argparse.ArgumentError('The number of thread is to high. Current: {}, Max: {}'.format(value, RequestHandler.MAX_NUMBER_REQUEST))
    return value

def do_request_with_dictionary(file_dict, host, thread, status_code, proxy, directory_to_ignore) -> None:
    word_dictionary = WordDictonary(file_dict)
    request_handler = RequestHandler(host, word_dictionary, thread, status_code, {'https': proxy, 'http': proxy}, directory_to_ignore)
    request_handler.send_requests_with_all_words()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', 
                        type=str,
                        required=True,
                        help='This is the url to scan')
    parser.add_argument('-f', '--file', 
                        type=argparse.FileType('r'), 
                        help='Input file with words.')
    parser.add_argument('-d', '--directory', 
                        type=str, 
                        help='Input directory with dictionary (.txt).')
    parser.add_argument('-t', '--thread', 
                        type=number_of_thread,
                        help='Number of threads the max value is {}'.format(RequestHandler.MAX_NUMBER_REQUEST))
    parser.add_argument('-s', '--status_code', 
                        nargs='*',
                        type=int,
                        help='list of status code to accept the default list is: {}'.format(RequestHandler.VALID_STATUS_CODE))
    parser.add_argument('-r', '--remove_status_code', 
                        nargs='*',
                        type=int,
                        help='list of status code to remove from list')
    parser.add_argument('-p', '--proxy', 
                        nargs='*',
                        type=str,
                        help='Specify the url of the proxy if you want to use one. (Ex: localhost:8080)')
    parser.add_argument('-i', '--ignore', 
                        nargs='*',
                        type=str,
                        help='Ignore a directory (Ex: css images)')
    parser.add_argument('-v', '--version', 
                        action='version',
                        version='%(prog)s {version}'.format(version=__version__))


    args = parser.parse_args()
    if not args.directory and not args.file:
        parser.error('Need a file (--file, -f) or a directory (--directory, -d) as input.')

    host = args.url if args.url.endswith('/') else args.url + '/'
    proxy = args.proxy[0] if args.proxy else None

    status_code = RequestHandler.VALID_STATUS_CODE
    if args.status_code:
        status_code = args.status_code
    if args.remove_status_code:
        status_code = [ code for code in status_code if code not in args.remove_status_code ]

    directory_to_ignore = args.ignore or []
    if args.directory:
        for file in glob.glob("{}*.txt".format(args.directory if args.directory.endswith('/') else args.directory + '/')):
            print('\n* Current file: {}'.format(file))
            do_request_with_dictionary(open(file, 'r'), host, args.thread, status_code, proxy, directory_to_ignore)
    else:
        do_request_with_dictionary(args.file, host, args.thread, status_code, proxy, directory_to_ignore)
        
if __name__ == "__main__":
    main()
